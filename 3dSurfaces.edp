
func mesh3 SurfaceHex(int[int] & N,int [int,int] &B ,int[int,int] & L,int orientation)
 {
     real x0=B(0,0),x1=B(0,1);
     real y0=B(1,0),y1=B(1,1);
     real z0=B(2,0),z1=B(2,1);

     int nx=N[0],ny=N[1],nz=N[2];

     mesh Thx = square(ny,nz,[y0+(y1-y0)*x,z0+(z1-z0)*y]);
     mesh Thy = square(nx,nz,[x0+(x1-x0)*x,z0+(z1-z0)*y]);
     mesh Thz = square(nx,ny,[x0+(x1-x0)*x,y0+(y1-y0)*y]);

     int[int] refx=[0,L(0,0)],refX=[0,L(0,1)];//  Xmin, Ymax faces labels renumbering
     int[int] refy=[0,L(1,0)],refY=[0,L(1,1)];//  Ymin, Ymax faces labels renumbering
     int[int] refz=[0,L(2,0)],refZ=[0,L(2,1)];//  Zmin, Zmax faces labels renumbering

     mesh3 Thx0 = movemesh23(Thx,transfo=[x0,x,y],orientation=-orientation,label=refx);
     mesh3 Thx1 = movemesh23(Thx,transfo=[x1,x,y],orientation=+orientation,label=refX);
     mesh3 Thy0 = movemesh23(Thy,transfo=[x,y0,y],orientation=+orientation,label=refy);
     mesh3 Thy1 = movemesh23(Thy,transfo=[x,y1,y],orientation=-orientation,label=refY);
     mesh3 Thz0 = movemesh23(Thz,transfo=[x,y,z0],orientation=-orientation,label=refz);
     mesh3 Thz1 = movemesh23(Thz,transfo=[x,y,z1],orientation=+orientation,label=refZ);
     mesh3 Th= Thx0+Thx1+Thy0+Thy1+Thz0+Thz1;
     return Th;
 }



func mesh3 Sphere(real R,real& h,int L,real orientation)
 {
   mesh  Th=square(10,20,[x*pi-pi/2,2*y*pi]);  //  $]\frac{-pi}{2},frac{-pi}{2}[\times]0,2\pi[ $
   //  a parametrization of a sphere
   func f1 =cos(x)*cos(y);
   func f2 =cos(x)*sin(y);
   func f3 = sin(x);
   //    partiel derivative
   func f1x=sin(x)*cos(y);
   func f1y=-cos(x)*sin(y);
   func f2x=-sin(x)*sin(y);
   func f2y=cos(x)*cos(y);
   func f3x=cos(x);
   func f3y=0;
   // the metric on the sphere  $  M = DF^t DF $
   func m11=f1x^2+f2x^2+f3x^2;
   func m21=f1x*f1y+f2x*f2y+f3x*f3y;
   func m22=f1y^2+f2y^2+f3y^2;

   func perio=[[4,y],[2,y],[1,x],[3,x]];  // to store the periodic condition

   real hh=h/R;// hh  mesh size on unite sphere
   real vv= 1/square(hh);
   Th=adaptmesh(Th,m11*vv,m21*vv,m22*vv,IsMetric=1,periodic=perio);
   Th=adaptmesh(Th,m11*vv,m21*vv,m22*vv,IsMetric=1,periodic=perio);
   Th=adaptmesh(Th,m11*vv,m21*vv,m22*vv,IsMetric=1,periodic=perio);
   Th=adaptmesh(Th,m11*vv,m21*vv,m22*vv,IsMetric=1,periodic=perio);
   int[int] ref=[0,L];

   mesh3  ThS= movemesh23(Th,transfo=[f1*R,f2*R,f3*R],orientation=orientation,refface=ref);
   return ThS;
 }


// Cylinder with main axis z, labels L
// nbmesh [nbmesh for circle, nbmesh for z axis]
func mesh3 Cylinder(int[int] nbmesh, real R, real x0, real y0, real zmin, real zmax, int[int] L, int[int] Lregion)
{
  int ncircle = nbmesh[0];
  int ncylinder = nbmesh[1];
  
  border circle(t=0,2*pi){x=R*cos(t)+x0;y=R*sin(t)+y0;}
  mesh circlemesh = buildmesh(circle(ncircle));

  /*
  int[int] Lup = [0,L[2]];
  int[int] Ldown = [0,L[0]];
  int[int] Lmid = [1,L[1]];
  mesh3 Th=buildlayers(circlemesh,ncylinder,zbound=[zmin,zmax],labelmid=Lmid, labelup=Lup, labeldown=Ldown,region=Lregion);
  */

  func XX1 = x;
  func YY1 = y;
  func ZZ1min = zmin;
  func ZZ1max = zmax;
  mesh3 Thcircle1 = movemesh23(circlemesh,transfo=[XX1,YY1,ZZ1min]);
  mesh3 Thcircle2 = movemesh23(circlemesh,transfo=[XX1,YY1,ZZ1max]);
  

  mesh3 Thcube = cube(ncircle,ncylinder,ncylinder);

  func XX = x;
  func YY = y;
  func ZZ = z;
  func ZZ2 = (zmax-zmin)*z + zmin;
  mesh3 Thcube2 = movemesh3(Thcube,transfo=[XX,YY,ZZ2]);

  func XX2 = R*cos(2*pi*x);
  func YY2 = R*sin(2*pi*x);
  mesh3 Thcube3 = movemesh3(Thcube2,transfo=[XX2,YY2,ZZ]);
  mesh3 Th = Thcircle1+Thcircle2+Thcube3;
  
  return Th;
}


// ellipsoid with axis x,y,z
func mesh3 Ellipsoid(real a,real b,real c,real& h,int L,real orientation)
{
     mesh  Th=square(10,20,[x*pi-pi/2,2*y*pi]);  //  $]\frac{-pi}{2},frac{-pi}{2}[\times]0,2\pi[ $
   //  a parametrization of a sphere
   func f1 =a*cos(x)*cos(y);
   func f2 =b*cos(x)*sin(y);
   func f3 =c*sin(x);
   //    partiel derivative
   func f1x=sin(x)*cos(y);
   func f1y=-cos(x)*sin(y);
   func f2x=-sin(x)*sin(y);
   func f2y=cos(x)*cos(y);
   func f3x=cos(x);
   func f3y=0;
   // the metric on the sphere  $  M = DF^t DF $
   func m11=f1x^2+f2x^2+f3x^2;
   func m21=f1x*f1y+f2x*f2y+f3x*f3y;
   func m22=f1y^2+f2y^2+f3y^2;

   func perio=[[4,y],[2,y],[1,x],[3,x]];  // to store the periodic condition

   real hh=h/min(a,b);// hh  mesh size on unite sphere
   real vv= 1/square(hh);
   //plot(Th,wait=true);
   Th=adaptmesh(Th,m11*vv,m21*vv,m22*vv,IsMetric=1,periodic=perio);
   Th=adaptmesh(Th,m11*vv,m21*vv,m22*vv,IsMetric=1,periodic=perio);
   Th=adaptmesh(Th,m11*vv,m21*vv,m22*vv,IsMetric=1,periodic=perio);
   Th=adaptmesh(Th,m11*vv,m21*vv,m22*vv,IsMetric=1,periodic=perio);
   int[int] ref=[0,L];
   //plot(Th,wait=true);

   mesh3  ThS= movemesh23(Th,transfo=[f1,f2,f3],orientation=orientation,refface=ref);
   return ThS;
}
